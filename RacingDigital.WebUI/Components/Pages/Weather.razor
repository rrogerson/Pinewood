@page "/weather"
@using RacingDigital.WebUI.Models
@attribute [StreamRendering]
@inject HttpClient Http
@inject ApiSettings ApiSettings
<PageTitle>@pageTitle</PageTitle>

<h1>@pageTitle</h1>

@if (raceResults == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Race
                </th>
                <th>Race Date</th>
                <th>Race Time</th>
                <th>Race Course</th>
                <th>Distance</th>
                <th>Jockey</th>
                <th>Trainer</th>
                <th>Horse</th>
                <th>Finishing Position</th>
                <th>Distance Beaten</th>
                <th>Time Beaten</th>
             
            </tr>
        </thead>
        <tbody>
            @foreach (var item in raceResults)
            {
                <tr>
                    <td>@item.Race</td>
                    <td>@item.RaceTime</td>
                    <td>@item.RaceTime</td>
                    <td>@item.Racecourse</td>
                    <td>@item.RaceDistance</td>
                    <td>@item.Jockey</td>
                    <td>@item.Trainer</td>
                    <td>@item.Horse</td>
                    <td>@item.FinishingPosition</td>
                    <td>@item.DistanceBeaten</td>
                    <td>@item.TimeBeaten</td>
                 
                </tr>
            }
        </tbody>
    </table>
}

@code {
 
    private string pageTitle = "Races";

    private List<RaceResults> raceResults;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            raceResults = await Http.GetFromJsonAsync<List<RaceResults>>($"{ApiSettings.RacingDigitalWebAPI}Races");

        }

        catch (Exception ex)
        {
            //TO DO Error handling
        }

    }
}
