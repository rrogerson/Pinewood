@page "/Customers/edit"
@using CustomerUI
@using Pinewood.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IConfiguration Configuration

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Customer</h4>
<hr />
@if (Customer is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Customer" OnValidSubmit="UpdateCustomer" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Customer.Id" value="@Customer.Id" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Customer.FirstName" class="form-control" />
                    <ValidationMessage For="() => Customer.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Customer.LastName" class="form-control" />
                    <ValidationMessage For="() => Customer.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Customer.Email" class="form-control" />
                    <ValidationMessage For="() => Customer.Email" class="text-danger" />
                </div>
               
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="Customer.Address" class="form-control" />
                    <ValidationMessage For="() => Customer.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="city" class="form-label">City:</label>
                    <InputText id="city" @bind-Value="Customer.City" class="form-control" />
                    <ValidationMessage For="() => Customer.City" class="text-danger" />
                </div>               
                <div class="mb-3">
                    <label for="postalcode" class="form-label">PostalCode:</label>
                    <InputText id="postalcode" @bind-Value="Customer.PostalCode" class="form-control" />
                    <ValidationMessage For="() => Customer.PostalCode" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="country" class="form-label">Country:</label>
                    <InputText id="country" @bind-Value="Customer.Country" class="form-control" />
                    <ValidationMessage For="() => Customer.Country" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/customers">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Customer? Customer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        List<Customer> customers = await Http.GetFromJsonAsync<List<Customer>>($"{Configuration["PinewoodWebAPI"]}api/Customer") ?? new List<Customer>();
        Customer ??= customers.FirstOrDefault(m => m.Id == Id);

        if (Customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task UpdateCustomer()
    {      
        await Http.PutAsJsonAsync($"{Configuration["PinewoodWebAPI"]}api/Customer", Customer);

        NavigationManager.NavigateTo("/customers");
    }
    
}
